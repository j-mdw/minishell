NAME	= minishell

SRCS	:= \
main\
signals\
shell_split\
redirections\
get_filename\
\
builtin_echo\
builtin_exit\
builtin_pwd\
builtin_env\
builtin_cd\
builtin_export\
builtin_unset\
builtin_init_names_arr\
builtin_init_funcarr\
builtin_init_data_struct\
builtin_free_data_struct\
\
env_get_val\
env_get_key\
env_print\
env_create_list\
env_make_arr\
\
parse_line\
parse_argv\
search_path\
first_read\
ft_isblank\
lit_status_init\
is_lit\
is_operator\
close_if\
param_trim\
\
exec_pipes\
exec_set_redir\
exec_init_cmd_data\
exec_close_cmd_data\
exec_set_cmd_filename\

S 		:= src/

O 		:= obj/

I		= -I .\
		-I libft/

O_FILES	:= $(addprefix $O, $(addsuffix .o, $(SRCS)))

H		= minishell.h

LIBFT	= libft/libft.a

CC		= gcc

CFLAGS	= -Wall -Werror -Wextra $I -g3 -O0

RM		= rm -f

NAME_BONUS	= minishell_bonus

SRCS_BONUS	:= \
tty_get_line\
tty_cursor\
tty_echo_del\
tty_move_left\
tty_newline\
tty_set_raw_mode\
tty_echo_escape\
tty_write_over\
tty_error\
tty_read_echo\
tty_echo_char\
tty_dynamic_array\
tty_move_cursor\
tty_erase_from_cursor\
tty_iter_hist\
tty_main\
tty_move_word\
tty_get_escape_seq\

SRCS_BONUS_FILES := $(addsuffix _bonus.c, $(SRCS_BONUS))


O_BONUS_FILES	:= $(addprefix $(O_BONUS), $(addsuffix _bonus.o, $(SRCS_BONUS)))

H_BONUS			= src/termcaps.h

CFLAGS_BONUS	= $(CFLAGS) $(I_BONUS)

all: $(NAME)

$(NAME): $(O_FILES) $(LIBFT)
	$(CC) $^ -o $@ 

$O%.o: $S%.c $H
	$(CC) $(CFLAGS) -c $< -o $@

$(LIBFT):
	$(MAKE) -C libft/

bonus: $(NAME_BONUS)

$(NAME_BONUS): $(O_FILES) $(O_BONUS_FILES) $(LIBFT)
	$(CC) $^ -o $(NAME)

$(O_BONUS)%.o: $(S_BONUS)%.c $(H_BONUS)
	$(CC) $(CFLAGS_BONUS) -c $< -o $@

clean:
	$(RM) $(O_FILES)
	$(RM) $(O_BONUS_FILES)
	make --directory=libft clean

fclean: clean
	$(RM) $(NAME)
	make --directory=libft fclean

re: fclean all

.PHONY: all, bonus, clean, fclean, re
